const vertexTypeLabels = {
    "python.package": "Python package",
    "repository": "Repository",
}
const defaultNodeStyle = {
    shape: 'box', vadjust: 2, font: {
        multi: 'html', color: '#fff', size: 14, pxface: 'arial', align: 'left',
        bold: {color: "#fff", size: 18}, italic: {color: '#fff8'}
    },
    color: {border: "#fff", background: '#0f1421', highlight: {border: "#fff", background: '#0f1421'}},
};
const defaultCVEStyle = {
    shape: 'box', vadjust: 2, font: {
        multi: 'html', color: '#f42', size: 14, pxface: 'arial', align: 'left',
        bold: {color: "#f42", size: 18}, italic: {color: '#fff8'}
    },
    color: {border: "#f42", background: '#0f1421', highlight: {border: "#f42", background: '#0f1421'}},
};

function escape(text) {
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
}

function renderGraph(nodes, edges) {
    const network = new vis.Network(document.getElementById('graph'), {nodes, edges}, {
        edges: {arrows: "middle"},
        physics: {solver: "repulsion", repulsion: {springLength: 200, nodeDistance: 600, damping: 0.09},},
    });
    network.on('doubleClick', function(properties) {
        if (properties.nodes && properties.nodes.length) {
            console.log(properties.nodes[0]);
        }
    });
}

async function fetchGraph(url) {
    const response = await fetch(`/get_repo_insights?query=${encodeURIComponent(url)}`);
    const {found, report} = await response.json()
    if (found) buildGraph(report);
    else window.location.href = `/?query=${encodeURIComponent(url)}`;
}

function buildGraph(report) {
    const {vertices, edges, meta} = report;

    const graphNodes = {};
    const graphEdges = edges.map(([n1, n2]) => ({from: n2, to: n1, color: "#fff"}));

    for (const {type, name, version, known_vulnerabilities} of vertices) {
        if (graphNodes.hasOwnProperty(name))
            graphNodes[name].label += `; ${version}`;
        else {
            let text = `<b>${escape(name)}</b>\n<i>${vertexTypeLabels[type]}</i>\n\n`;
            if (version) text += `Declared versions: ${version}`;

            let nodeStyle = type === "repository" ?
                {borderWidth: 4, widthConstraint: {minimum: 400, maximum: 800}, margin: 16} :
                {borderWidth: 2, widthConstraint: {minimum: 200, maximum: 400}, margin: 8};

            graphNodes[name] = {
                id: name, label: text, ...defaultNodeStyle, ...nodeStyle,
            };
            for (const vulnerability of known_vulnerabilities) {
                if (!graphNodes.hasOwnProperty(vulnerability)) {
                    const label = `<b>${vulnerability}</b>\n<i>Detected vulnerability</i>`;
                    graphNodes[vulnerability] = {
                        id: vulnerability, label, ...defaultCVEStyle,
                        borderWidth: 2, widthConstraint: {minimum: 200, maximum: 400}, margin: 8
                    };
                }
                graphEdges.push({from: name, to: vulnerability, color: "#f00"});
            }
        }
    }
    const graphNodesArray = [...Object.values(graphNodes)];

    populateGraphSummary(vertices, edges, meta);
    renderGraph(graphNodesArray, graphEdges);
}
function populateGraphSummary(vertices, edges, meta) {
    let html = `<h1>Graph for ${escape(query)}</h1>`;
    const all_vulnerabilities = {};
    for (const {known_vulnerabilities} of vertices) {
        for (const vulnerability of known_vulnerabilities) {
            if (all_vulnerabilities.hasOwnProperty(vulnerability)) all_vulnerabilities[vulnerability] += 1;
            else all_vulnerabilities[vulnerability] = 1;
        }
    }
    if (Object.keys(all_vulnerabilities).length) {
        html += "<p class='vulnerabilities'>";
        html += Object.entries(all_vulnerabilities)
            .map(([vulnerability, count]) => `<a href="https://nvd.nist.gov/vuln/detail/${vulnerability}" target="_blank">${vulnerability}</a>: ${count} vulnerable vertices`)
            .join("<br>");

        html += "</p>"
    } else html += "<p class='no-vulnerabilities'>No vulnerabilities found!</p>";

    const {repository_last_scanned, known_vulnerabilities_last_updated, index_completeness} = meta;
    html += `<p class='meta'>
        Graph generated: ${repository_last_scanned}<br>
        Vulnerabilities database updated: ${known_vulnerabilities_last_updated}<br>
        CVE index completeness at the time of report: ${(index_completeness*100).toFixed(2)}%
    </p>`;

    document.getElementById("summary").innerHTML = html;
}

const query = new URL(window.location).searchParams.get("query");
fetchGraph(query);
