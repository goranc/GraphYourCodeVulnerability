from core.nebula_client import NebulaClient
from copy import deepcopy


class DataStore:
    def __init__(self):
        self._dependencies_cache = {}
        self._nebula_client = NebulaClient()

    def lookup_dependencies(self, namespace, package, version):
        cached = self._dependencies_cache.get((namespace, package, version))
        if cached is not None:
            return deepcopy(cached)

        if stored := self._nebula_client.get_package_dependencies(f"{namespace}:{package}", version):
            return stored

    def store_dependencies(self, namespace, package, version, dependencies):
        self._dependencies_cache[(namespace, package, version)] = deepcopy(dependencies)
        self._nebula_client.insert_dependencies_for_package(f"{namespace}:{package}", version, dependencies)


data_store = DataStore()  # singleton
