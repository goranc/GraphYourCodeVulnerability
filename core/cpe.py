from core.nebula_client import NebulaClient
from json import dumps, loads
from re import findall
from time import sleep
from requests import get


class CPEManager:
    _cache_path = "tmp/cpe_cache.json"

    def __init__(self):
        self._cache = {}
        self._nebula_client = NebulaClient()

    def get(self, cve):
        if cve not in self._cache:
            # if not cached, check in nebula
            if not self.fetch_from_nebula(cve):
                # if not in nebula, query nvd. In case they rate limit us, wait 10 seconds and retry
                while not self.fetch_from_nvd(cve):
                    sleep(10)

        return self._cache[cve].copy()

    def fetch_from_nebula(self, cve):
        return self._nebula_client.get_cve_affected_software(cve)

    def fetch_from_nvd(self, cve):
        cve_url = f"https://nvd.nist.gov/vuln/detail/{cve}"
        cpe_regex = r"cpe:2\.3:.:([^:]+):([^:]+):([^:]+):([^:]+):[^:]+:[^:]+:[^:]+:[^:]+:[^:]+:[^:]+"

        response = get(cve_url).content.decode("utf-8", errors="ignore")

        if "Forbidden" in response:
            return False  # rate limited

        if "CVE ID Not Found" in response:
            # store in cache, but not in nebula; this way we'll check again on rebuild
            self._cache[cve] = []
            return True

        cve_data = [
            {key: value for key, value in zip(("vendor", "product", "version"), cpe)}
            for cpe in findall(cpe_regex, response)
        ]

        self._cache[cve] = cve_data
        self._nebula_client.insert_cve_affected_software(cve, cve_data)
        return True

    def flush_cache_to_disk(self):
        open(self._cache_path, "w").write(dumps(self._cache))

    def load_cache_from_disk(self):
        self._cache |= loads(open(self._cache_path).read())
