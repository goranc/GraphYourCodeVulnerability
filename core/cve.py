from csv import reader
from datetime import datetime
from threading import Thread

from requests import get
from core.cpe import CPEManager
from core.versioning import version_match


class CVEManager:
    _cache_path = "tmp/_cve_all.csv"
    _download_url = "https://cve.mitre.org/data/downloads/allitems.csv"

    def download_to_disk(self):
        with open(self._cache_path, "wb") as f:
            for chunk in get(self._download_url, stream=True).iter_content(1024**2):
                f.write(chunk)

    def stream_from_file(self):
        for index, line in enumerate(reader(open(self._cache_path, errors="ignore"))):
            if index < 10:  # skip header rows
                continue

            name, status, description, references, *_ = line

            yield {"name": name, "description": description, "references": references}


class CVESearch:
    def __init__(self):
        self._cve_data = []
        self.known_vulnerabilities_updated = datetime.now()
        self.cve_index_completeness = 0
        Thread(target=self.rebuild_cpe_thread).start()

    def rebuild_cpe_thread(self):
        print("Downloading CVEs...")
        cve_manager = CVEManager()
        cve_manager.download_to_disk()

        all_cves = sorted(
            list(cve_manager.stream_from_file()),
            key=lambda x: [int(f) for f in x["name"][4:].split("-")],
            reverse=True
        )
        cve_count = len(all_cves)

        print("Rebuilding CVE index...")
        cpe_manager = CPEManager()
        cpe_manager.load_cache_from_disk()

        for index, cve in enumerate(all_cves):
            cpe = cpe_manager.get(cve["name"])
            search = {f["product"].lower() for f in cpe}
            self._cve_data.append({"cpe": cpe, "search": search, **cve})

            cpe_manager.flush_cache_to_disk()
            self.cve_index_completeness = index/cve_count
            self.known_vulnerabilities_updated = datetime.now()
            if index % 1000 == 0:
                print(f"CVE index at {self.cve_index_completeness*100:.2f}%")

        print("CVE index rebuilt...")

    def search(self, name, version):
        name = name.lower()
        for cve_entry in self._cve_data:
            if name in cve_entry["search"]:
                yield from self.match(name, version, cve_entry)

    @staticmethod
    def match(name, version, cve_entry):
        for cpe in cve_entry["cpe"]:
            if cpe["product"].lower() == name and version_match(cpe["version"], version):
                yield cve_entry["name"]
